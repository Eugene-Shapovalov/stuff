" My .vimrc file
"
" Author: Konstantin Bukley <madundead@gmail.com>
" Raw version: http://raw.github.com/madundead/stuff/master/vim/vimrc
"
" Inspired by:
" Vincent Driessen <vincent@datafox.nl>
" https://raw.github.com/nvie/vimrc/master/vimrc
"
" amix the lucky stiff
" http://amix.dk/vim/vimrc.html
"
" Yan Pritzker
" https://github.com/skwp/dotfiles
"
" Colorscheme:
" Ethan Schoonover
" https://github.com/altercation/solarized
"
" Feel free to use, modify or share this file


" ========================================================
" -> General
" ========================================================

" turn off vi-compatible mode
if &compatible
  set nocompatible
endif

filetype off " temporary turning it off for vundle sake

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Bundler
Bundle 'gmarik/vundle'

" Colorscheme
Bundle 'altercation/vim-colors-solarized'
Bundle 'Railscasts-Theme-GUIand256color'
Bundle 'flazz/vim-colorschemes'


" Coding
" Support for user-defined text objects
Bundle 'kana/vim-textobj-user'
" Ruby blocks with (ar & ir)
Bundle 'nelstrom/vim-textobj-rubyblock'
" Ruby symbols (a: & i:)
Bundle 'bootleq/vim-textobj-rubysymbol'
" Lot of usefull rails stuff
Bundle 'tpope/vim-rails'
" Provides correct js indentations
Bundle 'pangloss/vim-javascript'


" Utility
Bundle 'mattn/zencoding-vim'
Bundle 'garbas/vim-snipmate'
Bundle 'tpope/vim-fugitive'
" press \\ to comment
Bundle 'tpope/vim-commentary'
" . now repeats some plugins functionality not only native
Bundle 'tpope/vim-repeat'
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'surround.vim'
Bundle 'kien/ctrlp.vim'
" Split or join blocks in one or multiple rows
Bundle 'AndrewRadev/splitjoin.vim'
Bundle 'gregsexton/gitv'
" Gists and webapi for vim as requirement for it
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
" Provides automatic closing of quotes, parenthesis, brackets, etc.,
Bundle 'Raimondi/delimitMate'

" Snippets
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "honza/snipmate-snippets"
Bundle "garbas/vim-snipmate"


" Syntax highlight
Bundle 'Markdown'
" Markdown now understands ```
Bundle 'jtratner/vim-flavored-markdown'
Bundle 'cucumber.zip'
Bundle 'tpope/vim-haml'
Bundle 'kchmck/vim-coffee-script'
Bundle 'skammer/vim-css-color'


" Appearence
Bundle 'xolox/vim-shell'
Bundle 'Lokaltog/vim-powerline'

" includes ftplugin.vim which is responsible for filetype detection
filetype plugin indent on

" encoding
set encoding=utf-8
set fileencoding=utf-8

" quantity of lines vim have to remember
set history=500

" set syntax highlighting
syntax on

" setting up <leader>
let mapleader=","
let g:mapleader=","


" ========================================================
" -> Colors & Fonts
" ========================================================

if has('gui_running')
  set guioptions-=T                         " remove toolbar
  set guioptions-=m                         " remove menubar
  set guioptions+=LlRrb                     " remove
  set guioptions-=LlRrb                     " scrollbars
  set guifont=Monaco\ for\ Powerline\ 10    " patched monaco font
  colorscheme solarized                     " awesome colorscheme
  set background=dark                       " realy nice :3
  set t_Co=256
  let g:solarized_termcolors=256
  let g:Powerline_symbols='fancy'
  " TODO make this work
  " let g:Powerline_theme='skwp'
  " let g:Powerline_colorscheme='skwp'
else
  set term=gnome-256color
  colorscheme railscasts
endif

" ========================================================
" -> User Interface
" ========================================================

" enables menu at the bottom
set wildmenu
" highlight search
set hlsearch
" do not redraw while running macros
set lazyredraw
" tab label - #{number} [{filename}] {modified}
set guitablabel=#%N\ [%t]\ %M
" show status even for single buffer displayed
set laststatus=2
" highlight current line
set cursorline
" number rows
set number
" disable welcome message
set shortmess+=I
" show matching braces
set showmatch
" shows when you are in insert mode
set showmode
" shows commands in right bottom corner
set showcmd
" show cursor position all the tiem
set ruler
" show title in console status bar
set title
" dont wrap lines
set nowrap
" when I scroll up or down, there are 2 lines between the line I'm on and the bottom or top of the screen.
set scrolloff=5
" how many tenths of a second to blink on matching brackets
set mat=2
" disable cursor blink
set gcr=a:blinkon0
" hide the mouse pointer while typing
set mousehide

" put NERDTree on the right. just because I can
let NERDTreeWinPos = "right"
" remove 'press ? for help' and .. (up on one dir)
let NERDTreeMinimalUI = 1
" replace ugly + with fancy arrows
let NERDTreeDirArrows = 1


" ========================================================
" -> Behavior & Different Tricks
" ========================================================

" shamelessly taken from YADR dotfile repo https://github.com/skwp/dotfiles
" stuff to ignore whent tab completing
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
" W invokes sudo
command W w !sudo tee % > /dev/null
" copying to clipboard
set clipboard=unnamed
" dunno
set matchtime=2
" force backspace to behave like in any other editor
set backspace=2
" editor will start searching when you type the first character of the search string
set incsearch
" turn off visualbell
set novisualbell
" no ~ backup files
set nobackup
set nowb
set noswapfile
" doesn't select lines number in vim
set mouse=a
" show whitespace characters
set list listchars=tab:→\ ,trail:·


" ========================================================
" -> Indentations
" ========================================================

" automatically inserts one extra level of indentation in some cases
set smartindent
" affects how <TAB> key presses are interpreted depending on where the cursor is
set smarttab
" tab counts as 4 columns
set tabstop=4
" numbers of spaces to (auto)indent
set shiftwidth=4


" ========================================================
" -> Filetype Dependent Settings
" ========================================================

if has("autocmd")
  " Filetype matches:
  " *.phtml => html
  autocmd BufNewFile,BufRead *.phtml set filetype=html

  " *.erb => html
  autocmd BufNewFile,BufRead *.erb set filetype=eruby

  " *.haml => haml
  autocmd BufNewFile,BufRead *.haml set filetype=haml

  " Gemfile => ruby
  autocmd BufNewFile,BufRead Gemfile,Vagrantfile setlocal filetype=ruby

  " Filetype rules:
  " YAML
  autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2

  " HAML
  autocmd FileType haml setlocal autoindent expandtab shiftwidth=2 softtabstop=2

  " HTML
  autocmd FileType html setlocal autoindent expandtab shiftwidth=2 softtabstop=2

  " CSS
  autocmd FileType css setlocal autoindent expandtab shiftwidth=2 softtabstop=2

  " ERB
  autocmd FileType eruby setlocal autoindent expandtab shiftwidth=2 softtabstop=2

  augroup markdown " {{{
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
  augroup end " }}}

  augroup html_files "{{{
    au!
    autocmd filetype ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  augroup end " }}}

  augroup ruby_files "{{{
    au!
    autocmd filetype ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  augroup end " }}}

  augroup javascript_files "{{{
    au!
    au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
  augroup end "}}}
endif


" ========================================================
" -> Hotkeys & Bindings
" ========================================================

" make p in visual mode replace the selected text with the yank register
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" ack
let g:ackprg="ack-grep -H --nocolor --nogroup --column"

" to save session
" autocmd VIMEnter * if !argc() | :source ~/.session.vim | endif
" autocmd VIMLeave * :mksession! ~/.session.vim

" C-Space for autocomplete
if has("gui")
    " C-Space seems to work under gVim on both Linux and win32
    inoremap <C-Space> <C-n>
else " no gui
  if has("unix")
    inoremap <Nul> <C-n>
  else
  " I have no idea of the name of Ctrl-Space elsewhere
  endif
endif

" swtich between buffers by arrows (that's not nice at all)
nmap <silent> <Up> :wincmd k<CR>
nmap <silent> <Down> :wincmd j<CR>
nmap <silent> <Left> :wincmd h<CR>
nmap <silent> <Right> :wincmd l<CR>

" change size of vsplited buffers by <Alt> + arrows
map <A-Left> <C-W><
map <A-Right> <C-W>>

" bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" ; = :
nnoremap ; :

" close buffer by Q
nmap Q :q!<CR>

" new tab by F1
nmap <F1> :tabnew<CR>
imap <F1> <ESC> :tabnew<CR>
vmap <F1> :tabnew<CR>

" vertical split by F2
nmap <silent> <F2> :vsplit<CR>
imap <F2> <ESC> :vsplit<CR>
vmap <F2> :vsplit<CR>

" horisontal split by F3
nmap <F3> :Ack
imap <F3> <Esc>:Ack
vmap <F3> <Esc>:Ack

" folding by F4
nnoremap <F4> za

" lets try to use dropbox file as notepad
nmap <F5> :sp ~/Dropbox/Backup/notes.md<CR>
imap <F5> <Esc> :sp ~/Dropbox/Backup/notes.md<CR>
imap <F5> <Esc> :sp ~/Dropbox/Backup/notes.md<CR>

" leader + a to copy all text from current buffer
nmap <leader>a :%y+ <CR>

" leader + , to launch NERDTree
nmap <leader>, :NERDTree <CR>

nmap <leader>g :Gitv <CR>

" leader + z to zencode
nmap <leader>z <C-y>, <CR>

" CtrlP for insert mode
imap <C-P> <ESC> :CtrlP<CR>

" when pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

" switching between tabs
nmap <silent> <Tab> :tabnext<CR>
nmap <silent> <S-Tab> :tabprevious<CR>

" remove search highlight
nmap <silent> <C-N> :silent noh<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" yy to yank whole line
nnoremap yy Y
" Y to yank til the end of line
nnoremap Y y$

" Hard to type things
imap -> →
imap <- ←
imap ^^ ↑
imap VV ↓
imap ^a λ


" window title is always 'vim'
auto BufEnter * let &titlestring = "vim"

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation : save last search, and cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    silent! call cursor(l, c)
endfunction

nnoremap <silent> <Leader>w :call <SID>StripTrailingWhitespaces()<CR>

" vim-javascript settings
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" gist clipboard
let g:gist_clip_command = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1
let g:gist_post_private = 1
let g:gist_show_privates = 1
